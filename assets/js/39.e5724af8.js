(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{492:function(s,e,a){"use strict";a.r(e);var n=a(30),r=Object(n.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"使用docker部署spring-boot项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用docker部署spring-boot项目"}},[s._v("#")]),s._v(" 使用docker部署spring boot项目")]),s._v(" "),a("p",[s._v("新建一个简单的spring boot项目")]),s._v(" "),a("img",{attrs:{src:"/old-times/png/docker/1.png"}}),s._v(" "),a("p",[s._v("pom中添加如下内容")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<properties>\n    <docker.image.prefix>springboot</docker.image.prefix>\n</properties>\n\n\x3c!-- docker插件 --\x3e\n        <plugin>\n            <groupId>com.spotify</groupId>\n            <artifactId>docker-maven-plugin</artifactId>\n            <version>1.0.0</version>\n            <configuration>\n                <imageName>${docker.image.prefix}/${project.artifactId}</imageName>\n                <dockerDirectory>src/main/docker</dockerDirectory>\n                <resources>\n                    <resource>\n                        <targetPath>/</targetPath>\n                        <directory>${project.build.directory}</directory>\n                        <include>${project.build.finalName}.jar</include>\n                    </resource>\n                </resources>\n            </configuration>\n        </plugin>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[s._v("编写DockerFile文件")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('FROM java:8\nVOLUME /tmp\nADD docker-0.0.1-SNAPSHOT.jar app.jar\nENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("FROM指令指定一个已经存在的镜像，告诉Docker后续的指令都是在这个基础上进行的。例如：FROM java:8表示使用 Jdk1.8 环境为基础镜像进行构建镜像。")]),s._v(" "),a("p",[s._v("VOLUME ，VOLUME 指向了一个/tmp的目录，由于Spring Boot使用内置的Tomcat容器，Tomcat 默认使用/tmp作为工作目录。这个命令的效果是：在宿主机的/var/lib/docker目录下创建一个临时文件并把它链接到容器中的/tmp目录")]),s._v(" "),a("p",[s._v("ADD ，拷贝文件并且重命名")]),s._v(" "),a("p",[s._v("ENTRYPOINT，为了缩短Tomcat 的启动时间，添加java.security.egd的系统属性指向/dev/urandom作为ENTRYPOINT。")]),s._v(" "),a("h3",{attrs:{id:"环境搭建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境搭建"}},[s._v("#")]),s._v(" 环境搭建")]),s._v(" "),a("p",[s._v("1、使用命令yum install -y docker安装Docker，“-y”表示不询问，使用默认配置进行安装。")]),s._v(" "),a("p",[s._v("2、启动docker服务 并设为开机自启动")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("systemctl start docker.service\nsystemctl enable docker.service\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("通过docker version查看docker版本，如下则是安装成功")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[root@izbp17yba27ayp060fvodfz ~]# docker version\nClient:\n Version:         1.13.1\n API version:     1.26\n Package version: docker-1.13.1-208.git7d71120.el7_9.x86_64\n Go version:      go1.10.3\n Git commit:      7d71120/1.13.1\n Built:           Mon Jun  7 15:36:09 2021\n OS/Arch:         linux/amd64\n\nServer:\n Version:         1.13.1\n API version:     1.26 (minimum version 1.12)\n Package version: docker-1.13.1-208.git7d71120.el7_9.x86_64\n Go version:      go1.10.3\n Git commit:      7d71120/1.13.1\n Built:           Mon Jun  7 15:36:09 2021\n OS/Arch:         linux/amd64\n Experimental:    false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("新建一个目录，放入编写的dockefile文件和jar包")]),s._v(" "),a("img",{attrs:{src:"/old-times/png/docker/2.png"}}),s._v(" "),a("p",[s._v("执行如下命令")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("docker build -t docker .\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("执行docker build命令，docker就会根据Dockerfile里你定义好的命令进行构建新的镜像。\n-t代表要构建的镜像的tag，.代表当前目录，也就是Dockerfile所在的目录。")]),s._v(" "),a("p",[s._v("构建完成后，通过docker run -d -p 8080:8080 docker即可运行spring boot项目。")]),s._v(" "),a("p",[s._v("运行项目报错如下，是CentOS版本问题，利用yum update更新一下系统就好")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('starting container process caused "process_linux.go:258: applying cgroup con\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("访问项目成功")]),s._v(" "),a("img",{attrs:{src:"/old-times/png/docker/3.png"}}),s._v(" "),a("h4",{attrs:{id:"tem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tem"}},[s._v("#")]),s._v(" tem")]),s._v(" "),a("p",[s._v("docker ps|grep tem")]),s._v(" "),a("p",[s._v("docker exec -it  3421 bash")]),s._v(" "),a("p",[s._v("docker cp tem.jar 3421:/")]),s._v(" "),a("p",[s._v("docker chmod 550 tem.jar")]),s._v(" "),a("p",[s._v("docker chown noe:noe tem.jar")]),s._v(" "),a("p",[s._v("exit")]),s._v(" "),a("p",[s._v("docker restart 3421")]),s._v(" "),a("h2",{attrs:{id:"kubernetes简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes简介"}},[s._v("#")]),s._v(" Kubernetes简介")]),s._v(" "),a("h3",{attrs:{id:"应用部署方式的演变"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用部署方式的演变"}},[s._v("#")]),s._v(" 应用部署方式的演变")]),s._v(" "),a("p",[s._v("1、传统部署"),a("br"),s._v("\n应用程序直接部署在物理机上\n优点：简单，不需要其他技术的参与\n缺点：不能为程序定义资源使用边界，很难合理的分配计算资源，而且程序之间容易产生影响。")]),s._v(" "),a("p",[s._v("2、虚拟化部署\n在一台物理机上运行多个虚拟机，每个虚拟机都是一个独立的环境\n优点：程序环境不会相互影响，保证了一定程度上的安全性\n缺点:增加了操作系统，浪费了部分资源。")]),s._v(" "),a("p",[s._v("3、容器化部署\n与虚拟化类似，但是共享了操作系统")]),s._v(" "),a("p",[s._v("优点：")]),s._v(" "),a("p",[s._v("可以保证每个容器拥有自己的文件系统、CPU、内存、进程空间等")]),s._v(" "),a("p",[s._v("运行应用程序所需要的资源都被容器包装，并和底层基础架构解耦")]),s._v(" "),a("p",[s._v("容器化的应用程序可以跨云服务商、跨Linux操作系统发行版进行部署")]),s._v(" "),a("p",[s._v("容器化部署方式给带来很多的便利，但是也会出现一些问题，比如说：")]),s._v(" "),a("p",[s._v("一个容器故障停机了，怎么样让另外一个容器立刻启动去替补停机的容器\n当并发访问量变大的时候，怎么样做到横向扩展容器数量\n这些容器管理的问题统称为容器编排问题，为了解决这些容器编排问题，就产生了一些容器编排的软件\nKubernetes就应运而生了。")]),s._v(" "),a("p",[s._v("docker解决了统一性打包这个问题  是整个云原生的基础\n是云原生的原子单位 单个容器并不能创造价值  并没有解决服务编排的问题")]),s._v(" "),a("p",[s._v("在云原生领域，将服务器作为一种资源，没有哪一台服务器是不可替换的，如果一个服务器挂了，\n那么悄无声息的换一台就是了。  任何一个部件都能被悄无声息的替换。")]),s._v(" "),a("p",[s._v("api server是核心")]),s._v(" "),a("p",[s._v("pod  一组容器  一个或多个   豌豆一样")]),s._v(" "),a("p",[s._v("共享存储、网络  以及怎样运行这些容器的声明")]),s._v(" "),a("p",[s._v("最小可部署的计算单元")]),s._v(" "),a("p",[s._v("工作负载\n-controller\ndeployment  集群上的无状态应用  销毁副本 是任意一个   保证其管理的pod数量永远符合用户的期望")]),s._v(" "),a("p",[s._v("statefulset 用于有状态应用 按顺序销毁")]),s._v(" "),a("p",[s._v("daemonset 本地节点常用运行的应用")]),s._v(" "),a("p",[s._v("job/cronjob 定时  无状态应用")]),s._v(" "),a("h3",{attrs:{id:"安装单机版k8s"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装单机版k8s"}},[s._v("#")]),s._v(" 安装单机版k8s")])])}),[],!1,null,null,null);e.default=r.exports}}]);