(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{499:function(n,a,s){"use strict";s.r(a);var e=s(30),t=Object(e.a)({},(function(){var n=this,a=n.$createElement,s=n._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[n._v("#")]),n._v(" 概述")]),n._v(" "),s("p",[n._v("提起线程，难免要被人问一嘴线程和进程的区别。")]),n._v(" "),s("p",[n._v("其实，所谓进程，可以理解为一个运行中的程序，每一个程序都是一个进程。")]),n._v(" "),s("p",[n._v("线程，是进程内部的划分，不同的功能可以是多个线程构成的。")]),n._v(" "),s("p",[n._v("关于线程，我们需要了解很多方面，包括但不限于线程的创建方式、\n线程池的使用、线程安全等等一系列操作。")]),n._v(" "),s("h2",{attrs:{id:"线程的常用操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程的常用操作"}},[n._v("#")]),n._v(" 线程的常用操作")]),n._v(" "),s("h3",{attrs:{id:"获取当前线程的名字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取当前线程的名字"}},[n._v("#")]),n._v(" 获取当前线程的名字")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Thread.currentThread()\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("h2",{attrs:{id:"线程的创建方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程的创建方式"}},[n._v("#")]),n._v(" 线程的创建方式")]),n._v(" "),s("h3",{attrs:{id:"继承thread类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#继承thread类"}},[n._v("#")]),n._v(" 继承Thread类")]),n._v(" "),s("p",[n._v("线程实现方式的第一种就是继承Thread类，并重写run方法，可以看到，\nrun方法是没有返回值的。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public class NewThread_v1 extends Thread {\n    @Override\n    public void run() {\n        System.out.println(Thread.currentThread().getName() + "启动了");\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("p",[n._v("测试类")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public class NewThreadTest {\n    public static void main(String[] args) {\n        NewThread_v1 newThread_v1 = new NewThread_v1();\n        NewThread_v1 newThread_v2 = new NewThread_v1();\n        newThread_v1.start();\n        newThread_v2.start();\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])]),s("p",[n._v("输出")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Thread-0启动了\nThread-1启动了\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("p",[n._v("可以看到，我们创建了两个NewThread_v1实例，通过Thread.currentThread().getName()\n获取当前线程的名字并打印输出，构造了两个不同的线程。")]),n._v(" "),s("h3",{attrs:{id:"实现runnable接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现runnable接口"}},[n._v("#")]),n._v(" 实现Runnable接口")]),n._v(" "),s("p",[n._v("实现线程的第二种方式就是实现Runnable接口，可以看到，实现Runnable\n接口，也是需要实现接口的run方法，该run方法与继承thread类需要重写\n的方法基本一致。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public class NewThread_v2 implements Runnable {\n    @Override\n    public void run() {\n        System.out.println(Thread.currentThread().getName() + "启动了");\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("p",[n._v("测试类")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public class NewThreadTest {\n    public static void main(String[] args) {\n        //实现runable接口\n        NewThread_v2 newThread_v2 = new NewThread_v2();\n        new Thread(newThread_v2).start();\n        new Thread(newThread_v2).start();\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])]),s("p",[n._v("输出")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Thread-0启动了\nThread-1启动了\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("p",[n._v("继承thread类的子类，本身就具备了thread的类型，可以调用父类的start\n方法，而实现了runnable接口的类本身并不是一个“线程类”，需要创建一个\nthread实例，并将本身作为参数传给thread，从而调用start方法。")]),n._v(" "),s("img",{attrs:{src:"/old-times/png/thread/1.jpg"}}),n._v(" "),s("h3",{attrs:{id:"实现callable接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现callable接口"}},[n._v("#")]),n._v(" 实现Callable接口")]),n._v(" "),s("p",[n._v("实现线程第三种方式就是实现Callable接口，与前两种方式最大的不同\n就是实现callable接口的线程可以有返回值，先看实现方式。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('import java.util.concurrent.Callable;\n\npublic class NewThread_v3 implements Callable {\n    @Override\n    public Object call() throws Exception {\n        String result = Thread.currentThread().getName() + "启动了";\n        System.out.println(result);\n        return result;\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("p",[n._v("测试类")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('import java.util.concurrent.ExecutionException;\nimport java.util.concurrent.FutureTask;\n\npublic class NewThreadTest {\n    public static void main(String[] args) {\n        //实现Callable接口\n        NewThread_v3 newThread_v3 = new NewThread_v3();\n        FutureTask futureTask = new FutureTask<>(newThread_v3);\n        FutureTask futureTask2 = new FutureTask<>(newThread_v3);\n        new Thread(futureTask).start();\n        new Thread(futureTask2).start();\n        try {\n            System.out.println("获取返回值：" + futureTask.get());\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br")])]),s("p",[n._v("输出")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Thread-0启动了\nThread-1启动了\n获取返回值：Thread-0启动了\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("p",[n._v("实现Callable接口的方式可以总结为如下流程")]),n._v(" "),s("p",[n._v("1、创建一个实现Callable的实现类。")]),n._v(" "),s("p",[n._v("2、实现call()方法，将此线程需要执行的操作声明在call()中。")]),n._v(" "),s("p",[n._v("3、创建Callable接口实现类的对象。")]),n._v(" "),s("p",[n._v("4、将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask的对象。")]),n._v(" "),s("p",[n._v("5、将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()方法。")]),n._v(" "),s("p",[n._v("如此，便完成了线程的创建。")]),n._v(" "),s("p",[n._v("上面可以看到，Thread类的参数为一个Runnable接口，而FutureTask也可以\n作为Thread的参数，毫无疑问的是FutureTask肯定也实现了Runnable接口。")]),n._v(" "),s("p",[n._v("首先创建FutureTask类时，该构造方法会接收一个Callable类型的参数")]),n._v(" "),s("img",{attrs:{src:"/old-times/png/thread/2.jpg"}}),n._v(" "),s("p",[n._v("而FutureTask类实现了RunnableFuture接口。")]),n._v(" "),s("img",{attrs:{src:"/old-times/png/thread/3.jpg"}}),n._v(" "),s("p",[n._v("RunnableFuture接口中只有一个run方法，同时该接口实现了Runnable, Future\n两个接口。")]),n._v(" "),s("img",{attrs:{src:"/old-times/png/thread/4.jpg"}}),n._v(" "),s("p",[n._v("这也解释了为什么创建Thread类时，可以接收一个FutureTask类型的参数。")]),n._v(" "),s("h4",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[n._v("#")]),n._v(" 总结")]),n._v(" "),s("p",[n._v("与使用Runnable相比，Callable功能更强大：")]),n._v(" "),s("p",[n._v("1、相比于run()方法，call()方法可以有返回值")]),n._v(" "),s("p",[n._v("2、call()方法可以抛出异常，被外面的操作捕获，获取异常的信息")]),n._v(" "),s("p",[n._v("3、Callable支持泛型的返回值")]),n._v(" "),s("p",[n._v("4、需要借助FutureTask类，比如获取返回结果")]),n._v(" "),s("p",[n._v("Future接口：")]),n._v(" "),s("p",[n._v("1、可以对具体Runnable、Callable任务的执行结果进行取消、查询是否完成、获取结果等。")]),n._v(" "),s("p",[n._v("2、FutureTask是Future接口的唯一的实现类。")]),n._v(" "),s("p",[n._v("3、FutureTask同时实现了Runnable、Future接口，它既可以作为Runnable被线程执行，\n也可以作为Future得到Callable的返回值。")]),n._v(" "),s("h3",{attrs:{id:"futuretask使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#futuretask使用"}},[n._v("#")]),n._v(" FutureTask使用")]),n._v(" "),s("h4",{attrs:{id:"获取返回值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取返回值"}},[n._v("#")]),n._v(" 获取返回值")]),n._v(" "),s("p",[n._v("通过futureTask.get()获取call方法的返回值。")]),n._v(" "),s("h4",{attrs:{id:"待补充"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#待补充"}},[n._v("#")]),n._v(" 待补充...")]),n._v(" "),s("h2",{attrs:{id:"run-方法和start-方法有什么不同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#run-方法和start-方法有什么不同"}},[n._v("#")]),n._v(" run()方法和start()方法有什么不同")]),n._v(" "),s("p",[n._v("run()方法和start()方法有什么不同,又是一个老生常谈的问题，且看下面示例。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public class RunStartTest {\n    public static void main(String[] args) {\n        Thread thread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println("新建线程:" + Thread.currentThread().getName() + "，启动了");\n            }\n        });\n        thread.run();\n        System.out.println("主线程:" + Thread.currentThread().getName() + "，启动了");\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("p",[n._v("输出")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("新建线程:main，启动了\n主线程:main，启动了\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("p",[n._v("我们都知道，正常情况下，在一个方法中，程序都是顺序执行的,上面的示例代码\n新建了一个线程，但是并没有调用线程的start方法，而是调用了run方法，\n输出中也使用了Thread.currentThread().getName()方法来观察当前是哪个\n线程。")]),n._v(" "),s("p",[n._v("从输出中可以看到，两者都在主线程main中，我们新增一个线程的目的好像并\n没有达到，答案已经呼之欲出了，如果只是调用run方法，那么只是单纯\n调用了一个方法，无法起到新增线程的目的。")]),n._v(" "),s("p",[n._v("那么我们把方法改为start();再来看看输出情况。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("主线程:main，启动了\n新建线程:Thread-0，启动了\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("p",[n._v("可以看到，主线程的流程并没有因为新线程的启动而发生“等待”，而是\n先执行了主线程的方法，另一个线程就绪了后也执行了，而且，可以看到\n线程的名字也发生了改变，说明我们新增的线程是另外一个，不再是\n主线程了。")]),n._v(" "),s("h4",{attrs:{id:"总结-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[n._v("#")]),n._v(" 总结")]),n._v(" "),s("p",[n._v("run方法只是单纯的调用方法，还是当前方法所处的线程内，会按照代码\n顺序顺序执行，而start方法才是多线程的创建方式。")]),n._v(" "),s("h2",{attrs:{id:"volatile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#volatile"}},[n._v("#")]),n._v(" volatile")]),n._v(" "),s("h3",{attrs:{id:"概述-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述-2"}},[n._v("#")]),n._v(" 概述")]),n._v(" "),s("p",[n._v("计算机在执行程序时，每条指令都是在CPU中执行的，而执行指令过程中，\n势必涉及到数据的读取和写入。由于程序运行过程中的临时数据是存放在\n主存（物理内存）当中的，这时就存在一个问题，由于CPU执行速度很快，\n而从内存读取数据和向内存写入数据的过程跟CPU执行指令的速度比起来\n要慢的多，因此如果任何时候对数据的操作都要通过和内存的交互来进行，\n会大大降低指令执行的速度。因此在CPU里面就有了高速缓存。")]),n._v(" "),s("p",[n._v("也就是，当程序在运行过程中，会将运算需要的数据从主存复制一份到\nCPU的高速缓存当中，那么CPU进行计算时就可以直接从它的高速缓存读取\n数据和向其中写入数据，当运算结束之后，再将高速缓存中的数据刷新到\n主存当中。举个简单的例子，比如下面的这段代码：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("i = i + 1;\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("p",[n._v("当线程执行这个语句时，会先从主存当中读取i的值，然后复制一份到高速\n缓存当中，然后CPU执行指令对i进行加1操作，然后将数据写入高速缓存，\n最后将高速缓存中i最新的值刷新到主存当中。")]),n._v(" "),s("p",[n._v("这个代码在单线程中运行是没有任何问题的，但是在多线程中运行就会有\n问题了。在多核CPU中，每条线程可能运行于不同的CPU中，因此每个线程\n运行时有自己的高速缓存（对单核CPU来说，其实也会出现这种问题，只不过\n是以线程调度的形式来分别执行的）。比如同时有2个线程执行这段代码，\n假如初始时i的值为0，那么我们希望两个线程执行完之后i的值变为2。\n但是事实会是这样吗？")]),n._v(" "),s("p",[n._v("可能存在下面一种情况：初始时，两个线程分别读取i的值存入各自所在的\nCPU的高速缓存当中，然后线程1进行加1操作，然后把i的最新值1写入到\n内存。此时线程2的高速缓存当中i的值还是0，进行加1操作之后，i的值\n为1，然后线程2把i的值写入内存。")]),n._v(" "),s("p",[n._v("最终结果i的值是1，而不是2。")]),n._v(" "),s("h3",{attrs:{id:"原子性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原子性"}},[n._v("#")]),n._v(" 原子性")]),n._v(" "),s("h2",{attrs:{id:"线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[n._v("#")]),n._v(" 线程池")]),n._v(" "),s("h3",{attrs:{id:"为什么要使用线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要使用线程池"}},[n._v("#")]),n._v(" 为什么要使用线程池？")]),n._v(" "),s("p",[n._v("提及线程池，这个彷佛也是一个无法避免的问题(为什么这么多无法避免的问题- -)。")]),n._v(" "),s("p",[n._v("其实这个也比较好理解，可以联想数据库连接池，如果没有druid等等数据库\n连接池的存在，那么我们每一次操作数据库，都要进行一个数据库连接，\n这样频繁的I/O操作，会对系统造成相当程度的性能损耗，极大的降低我们\n系统的性能，而数据库连接池的出现，就可以让我们初始化一个连接，只有\n在我们使用的时候才会建立连接，不用的时候则是处于空闲状态，对系统\n性能有极大的提升。")]),n._v(" "),s("p",[n._v("线程池也是相同的原理，使用线程池可以有如下好处")]),n._v(" "),s("p",[n._v("1、随着业务量的增加，我们可以会创建越来越多的线程，\n如果不加限制的创建线程，那么很容易造成内存溢出，从而导致程序崩溃，\n而使用线程池，可以对线程创建的数量加以限制，可以有效避免该问题。")]),n._v(" "),s("p",[n._v("2、如果程序中有大量短时间任务的线程任务，由于创建和销毁线程需要\n和底层操作系统交互，大量时间都耗费在创建和销毁线程上，因而比较\n浪费时间，系统效率很低"),s("br"),n._v("\n而线程池里的每一个线程任务结束后，并不会死亡，而是再次回到线程池\n中成为空闲状态，等待下一个对象来使用，因而借助线程池可以提高程序\n的执行效率")]),n._v(" "),s("h3",{attrs:{id:"线程池概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池概述"}},[n._v("#")]),n._v(" 线程池概述")]),n._v(" "),s("p",[n._v("在使用线程池之前，可以了解相关的概念。")]),n._v(" "),s("h4",{attrs:{id:"executors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#executors"}},[n._v("#")]),n._v(" Executors")]),n._v(" "),s("p",[n._v("Executors是一个使用了工厂模式的类，通过Executors我们可以创建常用的\n四种线程池，如：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("//eg：调用方式\nScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(100);\n\n//工厂方法\n public static ExecutorService newFixedThreadPool(int var0) {\n        return new ThreadPoolExecutor(var0, var0, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue());\n  }\n\t\n  public static ExecutorService newSingleThreadExecutor() {\n        return new Executors.FinalizableDelegatedExecutorService(new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue()));\n  }\n \n  public static ExecutorService newCachedThreadPool() {\n        return new ThreadPoolExecutor(0, 2147483647, 60L, TimeUnit.SECONDS, new SynchronousQueue());\n  }\n \n  public static ScheduledExecutorService newScheduledThreadPool(int var0) {\n        return new ScheduledThreadPoolExecutor(var0);\n  }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br")])]),s("h4",{attrs:{id:"executor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#executor"}},[n._v("#")]),n._v(" Executor")]),n._v(" "),s("p",[n._v("Executor和Executors很像，很容易混淆，但其实也很容易区分，Executors\n就是如上述所说，我们在创建线程池时会使用到，而Executor")]),n._v(" "),s("h3",{attrs:{id:"笔记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#笔记"}},[n._v("#")]),n._v(" 笔记")]),n._v(" "),s("p",[n._v("上下文切换---\x3e从一个任务切换到另一个任务")]),n._v(" "),s("p",[n._v("并发通常是提高程序在单处理器上的性能。\n多线程意味着更大的开销，但是如果一个顺序执行的程序在某一流程中\n被阻塞了(通常是I/O)，那么程序将会等待在这里；但如果是多线程程序\n其他流程仍会正常的执行。")]),n._v(" "),s("p",[n._v("实现并发最直接的方式是在操作系统级别使用进程，进程之间是互相隔离的，\n彼此不会干涉，但java中的并发编程存在如内存/I/O这种资源共享的场景。")]),n._v(" "),s("h2",{attrs:{id:"辅助工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#辅助工具"}},[n._v("#")]),n._v(" 辅助工具")]),n._v(" "),s("h3",{attrs:{id:"countdownlatch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#countdownlatch"}},[n._v("#")]),n._v(" CountDownLatch")]),n._v(" "),s("p",[n._v("想象如下一个场景，我们有一个系统点击商品有个详情信息，这个详情\n信息有商品名称，价格等基础信息，也有买了这个商品的用户对这个商品\n的评论。")]),n._v(" "),s("p",[n._v("其中，评论和基础信息都在不同的节点上部署，隶属于不同的模块，我们\n再返回给前端的详情数据一定是调用这些接口再进行组装的。如下所示。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@PostMapping("/getDetails")\npublic JsonObject getDetails(){\n    //调用基础信息\n    ...\n    baseInfo = ...\n\n    //调用评论信息\n    comment = ...\n\n    //拿到了全部信息，拼接商品详情并返回\n    details.setComment();\n    details.setBaseInfo();\n    return details;\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br")])]),s("p",[n._v("这种顺序执行的方式固然没错，但是当详情信息很多时，我们要分别\n调用不同的模块，如果其中有一个模块阻塞了，整个流程都会陷入\n超时的境地。")]),n._v(" "),s("p",[n._v("此时，我们可以用多个线程分别来调用不同的模块，当所有的模块\n都执行完毕后，再在主线程即详情拼接返回给前端所在的线程执行即可。")]),n._v(" "),s("p",[n._v("可以使用CountDownLatch,该类的构造器接收一个参数，一般几个线程\n就初始化为几，同时有两个方法，一个countdown(),分别在不同的\n线程中使用，线程执行完毕后调用该方法，可以将CountDownLatch初始化\n的值减一；另一个await()方法，再需要等待的线程中调用，线程会陷入\n阻塞状态，直至所有的线程执行完毕，级初始化的值变为0；")]),n._v(" "),s("p",[n._v("首先准备调用评论模块的一个类")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('import com.alibaba.fastjson.JSONObject;\n\npublic class Comment {\n    public JSONObject getComments() {\n        JSONObject comments = new JSONObject();\n        comments.put("coment1", "不错不错");\n        comments.put("coment2", "666,下次还买");\n        comments.put("coment3", "这就推荐给朋友");\n        return comments;\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("p",[n._v("再准备一个调用基础信息的模块")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('import com.alibaba.fastjson.JSONObject;\n\npublic class BaseInfo {\n    public JSONObject getBaseInfo() {\n        JSONObject baseInfo = new JSONObject();\n        baseInfo.put("名称", "AOC显示屏");\n        baseInfo.put("价格", "1299");\n        baseInfo.put("库存", "286");\n        return baseInfo;\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("p",[n._v("分别创建两个线程来调用两个模块")]),n._v(" "),s("p",[n._v("调用基础信息模块")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('import com.alibaba.fastjson.JSONObject;\n\nimport java.util.concurrent.CountDownLatch;\n\npublic class GetBaseInfoRunnable implements Runnable{\n\n    private CountDownLatch countDownLatch;\n\n    private JSONObject details;\n\n    public GetBaseInfoRunnable(CountDownLatch countDownLatch, JSONObject details){\n        this.countDownLatch = countDownLatch;\n        this.details = details;\n    }\n\n    @Override\n    public void run() {\n        //调用基础信息模块\n        JSONObject baseInfo = new BaseInfo().getBaseInfo();\n        details.put("baseInfo",baseInfo);\n        countDownLatch.countDown();\n        System.out.println("线程：" + Thread.currentThread().getName() + "执行完毕，CountDownLatch=" + countDownLatch);\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br")])]),s("p",[n._v("调用评论模块")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('import com.alibaba.fastjson.JSONObject;\n\nimport java.util.concurrent.CountDownLatch;\n\npublic class GetCommentRunnable implements Runnable{\n\n    private CountDownLatch countDownLatch;\n\n    private JSONObject details;\n\n    public GetCommentRunnable(CountDownLatch countDownLatch,JSONObject details){\n        this.countDownLatch = countDownLatch;\n        this.details = details;\n    }\n\n    @Override\n    public void run() {\n        //调用评论模块\n        JSONObject comments = new Comment().getComments();\n        details.put("comments",comments);\n        countDownLatch.countDown();\n        System.out.println("线程：" + Thread.currentThread().getName() + "执行完毕，CountDownLatch=" + countDownLatch);\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br")])]),s("p",[n._v("测试类")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('import com.alibaba.fastjson.JSONObject;\n\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class CountDownLatchTest {\n\n    static JSONObject details = new JSONObject();\n\n    static JSONObject comments = new JSONObject();\n\n    static JSONObject baseInfo = new JSONObject();\n\n    static CountDownLatch countDownLatch = new CountDownLatch(2);\n\n    public static void main(String[] args) throws Exception {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        System.out.println("线程：" + Thread.currentThread().getName() + "完成CountDownLatch初始化，CountDownLatch=" + countDownLatch);\n        executorService.execute(new GetBaseInfoRunnable(countDownLatch, details));\n        executorService.execute(new GetCommentRunnable(countDownLatch, details));\n        //等待所有线程执行完\n        countDownLatch.await();\n        Thread.sleep(1000);\n        System.out.println("线程：" + Thread.currentThread().getName() + "等待所有线程执行完毕了，CountDownLatch=" + countDownLatch);\n        System.out.println("返回详情给前端：details=" + details);\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br")])]),s("p",[n._v("输出")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('线程：main完成CountDownLatch初始化，CountDownLatch=java.util.concurrent.CountDownLatch@675d3402[Count = 2]\n线程：pool-1-thread-1执行完毕，CountDownLatch=java.util.concurrent.CountDownLatch@675d3402[Count = 1]\n线程：pool-1-thread-2执行完毕，CountDownLatch=java.util.concurrent.CountDownLatch@675d3402[Count = 0]\n线程：main等待所有线程执行完毕了，CountDownLatch=java.util.concurrent.CountDownLatch@675d3402[Count = 0]\n返回详情给前端：details={"baseInfo":{"名称":"AOC显示屏","价格":"1299","库存":"286"},"comments":{"coment1":"不错不错","coment2":"666,下次还买","coment3":"这就推荐给朋友"}}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("将CountDownLatch初始化值改为3，由于我们只有两个线程来执行任务，\n导致只有只有两个线程调用countdown()方法，并没有减为0；固主线程\n一直再等待。此时，输出为")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("static CountDownLatch countDownLatch = new CountDownLatch(3);\n\n//输出\n\n线程：main完成CountDownLatch初始化，CountDownLatch=java.util.concurrent.CountDownLatch@675d3402[Count = 3]\n线程：pool-1-thread-1执行完毕，CountDownLatch=java.util.concurrent.CountDownLatch@675d3402[Count = 2]\n线程：pool-1-thread-2执行完毕，CountDownLatch=java.util.concurrent.CountDownLatch@675d3402[Count = 1]\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("h3",{attrs:{id:"cyclicbarrier"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cyclicbarrier"}},[n._v("#")]),n._v(" CyclicBarrier")]),n._v(" "),s("p",[n._v("可以看出，CountDownLatch是一个线程受阻，等待除了阻塞线程以外的所有\n线程执行完毕，每执行完毕一个线程，coundown数量减一，当其为0时，受阻\n的线程会被唤醒。")]),n._v(" "),s("p",[n._v("而CyclicBarrier不同，其是在每一个线程的任务执行完毕后执行await()方法\n，这样这个线程会被阻塞，会等待其他线程执行完毕，就像是一道栅栏，每一个\n到达栅栏前的人都会等待其他人，只有当所有人(线程)都到达后，一同唤醒\n所有的线程。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('import java.util.concurrent.CyclicBarrier;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class CyclicBarrierTest {\n\n    public static void main(String[] args) {\n        CyclicBarrier cyclicBarrier = new CyclicBarrier(3);\n        ExecutorService executorService = Executors.newFixedThreadPool(3);\n\n        for (int i = 0; i < 3; i++) {\n            executorService.execute(new Runnable() {\n                @Override\n                public void run() {\n                    System.out.println(Thread.currentThread().getName() + "准备好了");\n                    try {\n                        cyclicBarrier.await();\n                        Thread.sleep(2000);\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                    System.out.println(Thread.currentThread().getName() + "开始出发！");\n                }\n            });\n        }\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br")])]),s("p",[n._v("输出")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("pool-1-thread-1准备好了\npool-1-thread-2准备好了\npool-1-thread-3准备好了\npool-1-thread-3开始出发！\npool-1-thread-1开始出发！\npool-1-thread-2开始出发！\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("p",[n._v("同理，如果将上述循环改为2此，那么就满足不了条件，所有的线程\n都会被阻塞。")]),n._v(" "),s("h3",{attrs:{id:"semaphore"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#semaphore"}},[n._v("#")]),n._v(" Semaphore")]),n._v(" "),s("p",[n._v("Semaphore可以解决如下场景的问题，当我们需要读取几千个文件数据时，\n我们起了20个线程来并发读取，但是读取完了之后，需要将文件数据入库，\n但是此时只有十个数据库连接，我们就可以用Semaphore来处理这个场景。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Semaphore;\n\npublic class SemaphoreTest {\n\n    public static void main(String[] args) {\n        //三个柜台办理业务\n        Semaphore semaphore = new Semaphore(3);\n        //五个人需要办理业务\n        ExecutorService executorService = Executors.newFixedThreadPool(5);\n        for (int i = 0; i < 5; i++) {\n            executorService.execute(new Runnable() {\n                @Override\n                public void run() {\n                    try {\n                        semaphore.acquire();\n                        System.out.println("线程：" + Thread.currentThread().getName() + "正在办理业务");\n                        Thread.sleep(5000); //办理时间 5s\n                        semaphore.release();\n                        System.out.println("线程：" + Thread.currentThread().getName() + "办理完了");\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            });\n        }\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br")])]),s("p",[n._v("输出")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("线程：pool-1-thread-1正在办理业务\n线程：pool-1-thread-2正在办理业务\n线程：pool-1-thread-3正在办理业务\n线程：pool-1-thread-2办理完了\n线程：pool-1-thread-5正在办理业务\n线程：pool-1-thread-4正在办理业务\n线程：pool-1-thread-1办理完了\n线程：pool-1-thread-3办理完了\n线程：pool-1-thread-4办理完了\n线程：pool-1-thread-5办理完了\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("p",[n._v("从输出可以看到，只能三个线程抢占到了资源，当三个线程使用完毕后，后两个\n线程也获得了资源。")])])}),[],!1,null,null,null);a.default=t.exports}}]);