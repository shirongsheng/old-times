(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{461:function(n,s,a){"use strict";a.r(s);var t=a(30),e=Object(t.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h3",{attrs:{id:"什么是单例模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是单例模式"}},[n._v("#")]),n._v(" 什么是单例模式？")]),n._v(" "),a("p",[n._v("单例模式是指一个系统中只存在该类的一个实例")]),n._v(" "),a("h3",{attrs:{id:"如何实现单例模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现单例模式"}},[n._v("#")]),n._v(" 如何实现单例模式？")]),n._v(" "),a("p",[n._v("单例模式的必要条件有两点：")]),n._v(" "),a("p",[n._v("1、由private修饰构造器，这样外部就无法通过new关键字创建该类的实例对象了")]),n._v(" "),a("p",[n._v("2、提供一个由public修改的静态方法，用于返回该类的实例对象")]),n._v(" "),a("h3",{attrs:{id:"单例模式的使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单例模式的使用场景"}},[n._v("#")]),n._v(" 单例模式的使用场景？")]),n._v(" "),a("p",[n._v("1、网站访问次数")]),n._v(" "),a("p",[n._v("2、配置文件读取")]),n._v(" "),a("p",[n._v("等系统中只需要一个对象存在的场景。")]),n._v(" "),a("h3",{attrs:{id:"饿汉式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#饿汉式"}},[n._v("#")]),n._v(" 饿汉式")]),n._v(" "),a("p",[n._v("实现一个最为简单的单例模式，如下所示")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public class Singlton_v1 {\n\n    //构造器私有，无法通过外部创建实例\n    private Singlton_v1(){\n\n    }\n\n    private static Singlton_v1 singlton_v1 = new Singlton_v1();\n\n    public static Singlton_v1 getInstance(){\n        return singlton_v1;\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br")])]),a("p",[n._v("由上面可以看出，在声明该单例类时就创建了实例对象。")]),n._v(" "),a("p",[n._v("当类装载的时候就会创建类实例，不管你用不用，先创建出来，然后每次调用的时候，就不需要判断了，节省了运行时间。")]),n._v(" "),a("p",[n._v("由于类装载时就会创建出实例，所以不存在线程安全问题，但是会有一定的内存消耗。")]),n._v(" "),a("h3",{attrs:{id:"懒汉式-延迟加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#懒汉式-延迟加载"}},[n._v("#")]),n._v(" 懒汉式(延迟加载)")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public class Singlton_v2 {\n\n    //构造器私有，无法通过外部创建实例\n    private Singlton_v2(){\n\n    }\n\n    private static Singlton_v2 singlton_v2;\n\n    public static Singlton_v2 getInstance(){\n        if (singlton_v2 == null){\n            singlton_v2 = new Singlton_v2();\n        }\n        return singlton_v2;\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br")])]),a("p",[n._v("由代码可以看到，首先声明实例引用，类加载时并未创建对象实例，\n只有调用到getInstance方法时，如果该对象未创建时才会实例化对象，\n此方式为延迟加载，只有用到时才创建对象，减少了内存消耗。")]),n._v(" "),a("p",[n._v("但是该方式显而易见的会存在线程安全问题，当线程A进入到判空语句后，对象还未创建之时，\n线程B也会进入到判空语句，此时就会出现问题。")]),n._v(" "),a("p",[n._v("我们最先想到的就是给对象加同步锁，如下所示")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public static synchronized Singlton_v2 getInstance(){\n        if (singlton_v2 == null){\n            singlton_v2 = new Singlton_v2();\n        }\n        return singlton_v2;\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])]),a("p",[n._v("这样可以很好的接口线程安全问题，但是除了第一次单例对象的创建外，\n后面的每一次调用方法，都会有同步机制，这会造成一定的性能损耗，故此，\n这种方式也是要被舍弃的，我们可以使用双重校验模式。")]),n._v(" "),a("p",[n._v("那么如何实现线程安全的懒汉式单例模式呢？")]),n._v(" "),a("h3",{attrs:{id:"双重校验-double-check-lock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双重校验-double-check-lock"}},[n._v("#")]),n._v(" 双重校验(double check lock)")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public class Singlton_v2 {\n\n    //构造器私有，无法通过外部创建实例\n    private Singlton_v2(){\n\n    }\n\n    private static Singlton_v2 singlton_v2;\n\n    public static synchronized Singlton_v2 getInstance(){\n        if (singlton_v2 == null){\n            synchronized (singlton_v2){\n                if (singlton_v2 ==null){\n                    singlton_v2 = new Singlton_v2();\n                }\n            }\n\n        }\n        return singlton_v2;\n    }\n}\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br")])]),a("p",[n._v("以上就是线程安全的懒汉式单例模式的实现方式了，也是我们常用的方式。")]),n._v(" "),a("h3",{attrs:{id:"使用静态内部类实现单例模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用静态内部类实现单例模式"}},[n._v("#")]),n._v(" 使用静态内部类实现单例模式")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public class Singlton_v3 {\n\n    //构造器私有，无法通过外部创建实例\n    private Singlton_v3(){\n\n    }\n\n    private static class Singlton{\n        private static Singlton_v3 singlton_v3 = new Singlton_v3();\n    }\n\n    private static Singlton_v3 singlton_v2;\n\n    public static Singlton_v3 getInstance(){\n        return Singlton.singlton_v3;\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br")])]),a("p",[n._v("当getInstance方法第一次被调用的时候,Singlton.singlton_v3，\n导致Singlton类得到初始化；而这个类在装载并被初始化的时候，会初始化它的静态域，\n从而创建Singlton_v3的实例，由于是静态的域，因此只会在虚拟机装载类的时候初始化一次，\n并由虚拟机来保证它的线程安全性。")]),n._v(" "),a("h4",{attrs:{id:"静态内部类和dcl创建单例模式的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态内部类和dcl创建单例模式的区别"}},[n._v("#")]),n._v(" 静态内部类和DCL创建单例模式的区别")]),n._v(" "),a("p",[n._v("静态内部类创建单例模式无法传递参数，而DCL创建单例模式可以传递参数，\n我们可以根据不同场景来选择不同的创建方式。")]),n._v(" "),a("h3",{attrs:{id:"使用枚举来实现单例模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用枚举来实现单例模式"}},[n._v("#")]),n._v(" 使用枚举来实现单例模式")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('public enum  EnumSinglton {\n    intance;\n\n    //可以实现相关的方法\n    public void method(){\n        System.out.println("dosomething...");\n    }\n    \n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br")])]),a("p",[n._v("可以通过EnumSinglton.intance来调用。")]),n._v(" "),a("p",[n._v("注：使用静态内部类和DCL创建单例模式时，在反射和序列化时不能保证对象的唯一性，\n所以，现在推荐使用枚举来创建单例模式。")]),n._v(" "),a("h3",{attrs:{id:"实战"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实战"}},[n._v("#")]),n._v(" 实战")]),n._v(" "),a("p",[n._v("1、假设我们有一个config.properties的配置文件，里面配置了我们给不同客户使用的配置信息，我们程序代码中\n则需要读取该配置文件，根据配置信息的不同，执行不同的业务逻辑。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('{\n    "customer":"tencent",\n    "systemName":"LOL",\n    "isPay":"true"\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("p",[n._v("2、此时我们可以新建一个单例类来读取该配置文件内容，代码如下所示。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('import com.alibaba.fastjson.JSONObject;\n\nimport java.io.*;\nimport java.nio.charset.StandardCharsets;\n\npublic class CustomerConfig {\n\n    private CustomerConfig(){\n        ClassLoader classLoader = CustomerConfig.class.getClassLoader();\n        String configPath = classLoader.getResource("config/config.properties").getPath();\n        File file = new File(configPath);\n        int ch = 0;\n        StringBuilder sb = new StringBuilder();\n        try(Reader reader = new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8);){\n            while ((ch = reader.read()) != -1){\n                sb.append((char) ch);\n            }\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        customerConfig = JSONObject.parseObject(sb.toString());\n    }\n\n\n    private volatile static CustomerConfig instance = null;\n\n    private static JSONObject customerConfig = new JSONObject();\n\n    public static CustomerConfig getInstance(){\n        if (null == instance){\n            synchronized (CustomerConfig.class){\n                if (null == instance){\n                    instance = new CustomerConfig();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public JSONObject getCustomerConfig(){\n        return customerConfig;\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br")])]),a("p",[n._v("3、编写测试类，测试读取内容")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("JSONObject customerConfig = CustomerConfig.getInstance().getCustomerConfig();\nSystem.out.println(customerConfig);\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("p",[n._v("输出如下")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('{"isPay":"true","systemName":"LOL","customer":"tencent"}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("p",[n._v("其中构造器中读取配置文件的写法也可以用如下方式")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    private CustomerConfig(){\n        InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("config/config.properties");\n        int ch = 0;\n        StringBuilder sb = new StringBuilder();\n        try(Scanner scanner = new Scanner(resourceAsStream)){\n            while(scanner.hasNextLine()){\n                sb.append(scanner.nextLine());\n            }\n        }catch(Exception e){\n            e.printStackTrace();\n\n        }\n        customerConfig = JSONObject.parseObject(sb.toString());\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);