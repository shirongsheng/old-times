(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{496:function(e,t,r){"use strict";r.r(t);var n=r(30),o=Object(n.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"摘要"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#摘要"}},[e._v("#")]),e._v(" 摘要")]),e._v(" "),r("p",[e._v("本篇文章主要记录operator实现的过程，目前只是简单的使用过，"),r("br"),e._v("\n很多场景还不是很清楚，先记录已经了解一些知识点，后续再不断完善吧~")]),e._v(" "),r("h2",{attrs:{id:"概述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),r("p",[e._v("k8s已经有了很多内置的资源，如deployment,service,configmap等等，"),r("br"),e._v("\n但是这些资源并不能够完全覆盖我们的业务场景，有时，我们需要通过自定义资源"),r("br"),e._v("\n来完成我们的需求，自定义资源的实现，可以让我们像使用k8s原生资源一样使用他们。")]),e._v(" "),r("h2",{attrs:{id:"脚手架搭建"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#脚手架搭建"}},[e._v("#")]),e._v(" 脚手架搭建")]),e._v(" "),r("p",[e._v("kuberbuilder是一个自定义资源的脚手架，像spring boot一样，可以让我们快速的"),r("br"),e._v("\n的开展我们的业务。")]),e._v(" "),r("p",[e._v("注:以下操作都是在配置了go环境的linux上操作，kuberbuilder推荐的go版本是"),r("br"),e._v("\nplugin requires go1.19 <= version < go2.0alpha1。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("//go env环境\n$ go env -w GO111MODULE=on\n$ go env -w GOPROXY=https://goproxy.cn,direct\n")])])]),r("p",[e._v("如果公司是内网，可以参照七牛云配置代理。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("https://goproxy.cn/\n")])])]),r("p",[e._v("从以下链接中下载Kuberbuilder"),r("br"),e._v("\nhttps://github.com/kubernetes-sigs/kubebuilder/releases")]),e._v(" "),r("p",[e._v("执行如下命令")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("mv kubebuilder_linux_amd64 /usr/local/bin\nchmod +x kuberbuilder\n")])])]),r("p",[e._v("创建项目文件夹")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("mkdir /root/shirs/operator\ncd /root/shirs/operator\ngo mod init\n\n//生成项目基本框架\nkuberbuilder init --domain shirs.com\n\n//配置自定义资源gvk信息\nkuberbuilder create api --group shirs --version v1 --kind DeployReplicas\n")])])]),r("p",[e._v("此时项目已经生成完毕，目录结构如下")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("[root@k8s-master shirs]# cd operator/\n[root@k8s-master operator]# ll\ntotal 108\ndrwx------. 3 root root    16 Dec 18 09:49 api\ndrwxr-xr-x. 2 root root    28 Dec 18 09:49 bin\ndrwx------. 8 root root    92 Dec 18 09:49 config\ndrwx------. 2 root root    63 Dec 18 09:49 controllers\n-rw-------. 1 root root  1250 Dec 18 09:46 Dockerfile\n-rw-r--r--. 1 root root  3742 Dec 18 09:49 go.mod\n-rw-r--r--. 1 root root 78448 Dec 18 09:49 go.sum\ndrwx------. 2 root root    32 Dec 18 09:46 hack\n-rw-------. 1 root root  3827 Dec 18 09:49 main.go\n-rw-------. 1 root root  7184 Dec 18 09:46 Makefile\n-rw-------. 1 root root   272 Dec 18 09:49 PROJECT\n-rw-------. 1 root root  2718 Dec 18 09:46 README.md\n")])])]),r("p",[e._v("此时，我们就可以将项目copy到我们的goland里开发业务逻辑了。")]),e._v(" "),r("h2",{attrs:{id:"类型定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类型定义"}},[e._v("#")]),e._v(" 类型定义")]),e._v(" "),r("p",[e._v("项目的/api/v1目录下可以看到以我们定义类型命名的deployreplicas_types.go文件。")]),e._v(" "),r("p",[e._v("修改spec部分如下，目前我希望这个自定义资源做到的事情是，可以在resourceSelector"),r("br"),e._v("\n这个参数里，指定我需要关联的无状态应用(当然也可以扩展，关联任何一种资源，这里为了"),r("br"),e._v("\n简单，只关联无状态应用),replicas指定了我希望关联的无状态应用有几个副本，目前只实现"),r("br"),e._v("\n我的自定义资源可以控制关联应用的副本数，后续可以添加同步操作，让deploy的副本数只能"),r("br"),e._v("\n由自定义资源控制，自己也无法修改(即修改了再被该回去)。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('type DeployReplicasSpec struct {\n\t// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster\n\t// Important: Run "make" to regenerate code after modifying this file\n\n\t//我希望的副本数\n\tReplicas         int32            `json:"replicas,omitempty"`\n\t//我希望关联的无状态应用\n\tResourceSelector ResourceSelector `json:"resourceSelector,omitempty"`\n}\n\ntype ResourceSelector struct {\n\tKind      string `json:"kind,omitempty"`\n\tName      string `json:"name,omitempty"`\n\tNamespace string `json:"namespace,omitempty"`\n}\n')])])]),r("p",[e._v("以上，我的自定义资源就定义完了，我们将这个文件替换到环境上，执行make run操作。"),r("br"),e._v("\n执行完成后，可以在项目的config/crd/bases目录下生成crd文件。"),r("br"),e._v("\n我们在环境上kubectl apply -f执行该文件，这样环境上才有了自定义资源的定义。")]),e._v(" "),r("h2",{attrs:{id:"业务控制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#业务控制"}},[e._v("#")]),e._v(" 业务控制")]),e._v(" "),r("p",[e._v("在controller目录下，可以看到deployreplicas_controller.go文件。\n这里可以编写我们这个自定义资源的业务逻辑，即你想让他完成什么事情，"),r("br"),e._v("\n资源的控制器就是这里。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('func (r *DeployReplicasReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {\n\t_ = log.FromContext(ctx)\n\n\tdeployReplicas := &shirsv1.DeployReplicas{}\n\terr := r.Client.Get(ctx, types.NamespacedName{\n\t\tNamespace: "default",\n\t\tName:      "deployreplicas-sample",\n\t}, deployReplicas)\n\n\tif err!=nil {\n\t\tfmt.Print("get replicas error" )\n\t}\n\n\tdeployment := &v1.Deployment{}\n\terr = r.Client.Get(ctx, types.NamespacedName{\n\t\tNamespace: deployReplicas.Spec.ResourceSelector.Namespace,\n\t\tName:      deployReplicas.Spec.ResourceSelector.Name,\n\t}, deployment)\n\tif err!=nil {\n\t\tfmt.Print("get replicas error" )\n\t}\n\treplicas := &deployReplicas.Spec.Replicas\n\tdeployment.Spec.Replicas = replicas\n\tr.Client.Update(ctx,deployment)\n\n\treturn ctrl.Result{}, nil\n}\n')])])]),r("p",[e._v("上面就是简单的逻辑内容，我先查到deployReplicas这个资源，然后根据他期待的"),r("br"),e._v("\n副本数去修改deploy的副本数即可。")]),e._v(" "),r("h2",{attrs:{id:"验证"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#验证"}},[e._v("#")]),e._v(" 验证")]),e._v(" "),r("p",[e._v("类型定义和业务控制已经完成了，现在我就可以创建我的自定义资源了，如下。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("apiVersion: shirs.shirs.com/v1\nkind: DeployReplicas\nmetadata:\n  labels:\n    app.kubernetes.io/name: deployreplicas\n    app.kubernetes.io/instance: deployreplicas-sample\n    app.kubernetes.io/part-of: operator\n    app.kubernetes.io/managed-by: kustomize\n    app.kubernetes.io/created-by: operator\n  name: deployreplicas-sample\nspec:\n  replicas: 2\n  resourceSelector:\n    kind: Deployment\n    name: nginx\n    namespace: default\n")])])]),r("p",[e._v("可以看到，我希望名为nginx的deploy副本数变成2，项目启动后，观察pod数量。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("[root@k8s-master operator]# kubectl get pod\nNAME                     READY   STATUS    RESTARTS   AGE\nnginx-6799fc88d8-vps8z   1/1     Running   0          53m\nnginx-6799fc88d8-z5p2c   1/1     Running   1          2d2h\n")])])]),r("p",[e._v("发现目的已经达到。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("                                                                     --2022/12/18 17:49\n")])])])])}),[],!1,null,null,null);t.default=o.exports}}]);